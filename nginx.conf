# Nginx configuration for QR Code Generator

# Define the PHP-FPM upstream server
upstream php-fpm {
    server unix:/var/run/php/php8.3-fpm.sock;
    # Alternative if using TCP instead of socket
    # server 127.0.0.1:9000;
}

server {
    # Listen on port 80 (HTTP)
    listen 80;
    # Optional: Listen on IPv6
    listen [::]:80;

    # Server name (domain)
    server_name qr-generator.example.com;

    # Document root
    root /var/www/qr-generator;

    # Default index files
    index index.php index.html;

    # Character encoding
    charset utf-8;

    # Logs
    access_log /var/log/nginx/qr-generator.access.log;
    error_log /var/log/nginx/qr-generator.error.log;

    # Handle PHP files
    location ~ \.php$ {
        # Verify the file exists before passing to PHP-FPM
        try_files $uri =404;

        # Pass PHP scripts to PHP-FPM
        fastcgi_pass php-fpm;
        fastcgi_index index.php;

        # Include the standard fastcgi parameters
        include fastcgi_params;

        # Set script filename parameter for PHP-FPM
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;

        # Set PATH_INFO
        fastcgi_param PATH_INFO $fastcgi_path_info;

        # Increase timeouts for PDF generation
        fastcgi_read_timeout 60s;
    }

    # Handle static files
    location ~* \.(js|css|png|jpg|jpeg|gif|ico)$ {
        expires max;
        log_not_found off;
        access_log off;
        add_header Cache-Control "public, max-age=31536000";
    }

    # Deny access to hidden files
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }

    # Deny access to composer files
    location ~ /(composer\.(json|lock)|vendor) {
        deny all;
        access_log off;
        log_not_found off;
    }

    # Deny access to test script
    location = /test.php {
        deny all;
        access_log off;
        log_not_found off;
    }

    # Security headers
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;

    # Optional: Enable HTTPS (requires SSL certificate)
    # Uncomment the following section and comment out the HTTP section above

    # listen 443 ssl http2;
    # listen [::]:443 ssl http2;
    # ssl_certificate /etc/nginx/ssl/qr-generator.crt;
    # ssl_certificate_key /etc/nginx/ssl/qr-generator.key;
    # ssl_protocols TLSv1.2 TLSv1.3;
    # ssl_prefer_server_ciphers on;
    # ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256';
    # ssl_session_timeout 1d;
    # ssl_session_cache shared:SSL:10m;
    # ssl_session_tickets off;
    # ssl_stapling on;
    # ssl_stapling_verify on;
    # add_header Strict-Transport-Security "max-age=63072000" always;

    # Optional: Redirect HTTP to HTTPS
    # server {
    #     listen 80;
    #     listen [::]:80;
    #     server_name qr-generator.example.com;
    #     return 301 https://$server_name$request_uri;
    # }
}
